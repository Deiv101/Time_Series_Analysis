# Importing essential starter libraries

import numpy as np      # vectors and matrices
import pandas as pd     # tables and data manipulations

# For Dates

import datetime
from dateutil.relativedelta import relativedelta    # ---> working with dates with style

# Sklearn imports

from sklearn import metrics
from sklearn import datasets
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score

# Statistics and Econometrics -- StatsModel

import statsmodels.formula.api as smf
import statsmodels.tsa.api as smt
import statsmodels.api as sm
import scipy.stats as scs
from scipy.optimize import minimize                 # for function minimization
from statsmodels.tsa.seasonal import seasonal_decompose

# Visualization Libraries

import matplotlib.pyplot as plt # plots
import seaborn as sns # more plots
plt.style.use('fivethirtyeight')
# Above is a special style template for matplotlib, highly useful for visualizing time series data

# Visualization with Plotly

import chart_studio.plotly as ply # more fancy plots
import cufflinks as cf
from chart_studio.plotly import plot_mpl
import plotly.express as px

# Some Useful Functions

from itertools import product
from tqdm import tqdm_notebook
import warnings                   # `do not disturb` mode
warnings.filterwarnings('ignore')

# For colored print outputs

from termcolor import colored 

# Print the graphs as PDF and PNG
from IPython.display import set_matplotlib_formats
set_matplotlib_formats('png', 'pdf')


# import libraries
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
from matplotlib.pylab import rcParams
from statsmodels.tsa.arima_model import ARMA
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.seasonal import seasonal_decompose
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 50)
import warnings
warnings.filterwarnings('ignore')
import itertools
import pmdarima as pm
plt.style.use('ggplot')

# Visualization with Plotly
import chart_studio.plotly as ply # more fancy plots
import cufflinks as cf
from chart_studio.plotly import plot_mpl
import plotly.express as px

# Print the graphs as PDF and PNG

from IPython.display import set_matplotlib_formats
set_matplotlib_formats('png', 'pdf')
# To have graphs embedded in the notebook
%matplotlib inline

# load data
ts = data = pd.read_csv('AggregateElectricityData.csv')

# get the first 5 rows
ts.head()
